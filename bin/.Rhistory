```{r}
library(SNPRelate)
library(SNPRelate)
library(ape)
library(ggplot2)
snpgdsBED2GDS("../data/wolves_maf0.5.bed",
"../data/wolves_maf0.5.fam",
"../data/wolves_maf0.5.bim",
out.gdsfn="../data/wolves_maf0.5.gds",
option = snpgdsOption(W=39)) # 39 chromosome
###Summary of the archive .gds
snpgdsSummary("../data/wolves_maf0.5.gds")
###Load the data of the .gds archive
genofile <- snpgdsOpen("../data/wolves_maf0.5.gds")
###Check snp.ids
head(read.gdsn(index.gdsn(genofile, "snp.id")))
###Check sample.ids
head(read.gdsn(index.gdsn(genofile, "sample.id")))
###Obtain names of the samples of the gdsn archive
sample.id <- read.gdsn(index.gdsn(genofile, "sample.id"))
sample.id
###PCA
pca <- snpgdsPCA(genofile, num.thread=2)
###Calculate the % of variation in the first components
pc.percent <- pca$varprop*100
head(round(pc.percent, 2))
x<-round(pc.percent, 2)
sum(x[1:4])
sum(x[1:10])
sum(x[1:30])
###Create a data frame with the results of the components
tab <- data.frame(sample.id = pca$sample.id,
EV1 = pca$eigenvect[,1],    # the first eigenvector
EV2 = pca$eigenvect[,2],    # the second eigenvector
stringsAsFactors = FALSE)
head(tab)
###Plot
ggplot(data = tab, aes(x=EV2, y=EV1), colour= id ) + geom_point() +
ylab(paste0("eigenvector 1 explaining ", round(pc.percent, 2)[1], "%")) +
xlab(paste0("eigenvector 2 explaining ", round(pc.percent, 2)[2], "%"))
het<- read.table("../data/out.het",header=TRUE)
ggplot(data = het, aes(x=het$INDV, y=het$F)) + #We are telling ggplot what data need to use and the axis of the plot
geom_bar(stat = "identity") + #Type of plot: barplot
coord_flip() + #Rotate the plot
ggtitle("Heterozigocity (Fixation index)") + #Title of the plot
theme(title = element_text(hjust = 0.5)) + #Colocate the title in the center of the image
ylab("Fixation index") + #Names of the axis
xlab("Individual") +
theme_classic(base_size = 5) + #Size of the font
theme(axis.text.x = element_text(size = 10)) + #Size of the axis and text of the axis
theme(axis.title.y = element_text(size = 10)) +
theme(axis.title.x = element_text(size = 10)) +
theme(title = element_text(size = 15)) #Size of the title
